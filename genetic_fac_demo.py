import pandas as pd
import numpy as np
import datetime as dt
from matplotlib import pyplot as plt
import PortAnalysis as pa
import os
import time
from tqdm import tqdm
from math import log
from AlphaMiner_v2 import AlphaMiner
from Factory import Factory

if __name__ == '__main__':
    # NOTE: Set your data path here
    data_path = 'C:\\CODES\\CODE_PYTHON\\stock_sample.csv'
    data = Factory.clean(data_path, is_zscore=True)

    test_st = dt.datetime(2010, 1, 1)
    data = data[test_st:]

    news = data[['permno', 'stock_exret']].copy()
    new_facs = ['genetic' + str(i) for i in range(1, 7)]

    # All the factors below are generated by the genetic algorithm
    news[new_facs[0]] = data['ocf_at'] - data['rmax5_21d'] + data['fcf_me'] + data['sale_me']
    news[new_facs[1]] = data['op_at'] - data['rmax5_21d'] + data['fcf_me'] + data['sale_me']
    news[new_facs[2]] = data['ocf_at'] + data['mispricing_mgmt'] - data['rmax5_21d'] - np.sin(data['ret_1_0']) - data['market_equity']
    news[new_facs[3]] = data['fcf_me'] - (data['op_at'] * data['ebitda_mev'] + (data['eqnetis_at'] - (data["op_at"] - data['market_equity']))) - (np.sqrt(np.abs(data['mispricing_perf'])) + (data['ivol_ff3_21d'] - data['sale_me']) + data['rmax5_21d'])
    news[new_facs[4]] = np.sin(data['ret_1_0']) + data['rmax5_21d'] - data['sale_me'] - data['cop_at'] + data['eqnetis_at'] - data['fcf_me'] + np.abs(data['betadown_252d'])
    # news[new_facs[5]] = data['bidaskhl_21d'] - (data['cop_at'] - (data['market_equity'] + 2 * np.sin(data['ret_1_0']) + data['ivol_capm_252d'] - data['op_atl1'] + data['ivol_capm_21d']))

    fac = 'genetic1'
    miner = AlphaMiner(news, fac)
    miner.rank_ic()
    miner.ir()
    miner.ir(24)
    miner.group()
    miner.benchmark()
    miner.draw(is_show=True)
    del miner

    strategy_rets = []
    for i in range(0, 5):
        fac = new_facs[i]
        ascending = False if i != 4 else True
        port_ret = pa.long_short_original(news, fac, ascending=ascending, method='long')

        print('\nFactor:', fac)
        print('Annualized Sharpe:', pa.sharpe(port_ret))
        print('Max 1m loss:', pa.max_1m_loss(port_ret))
        print('Max Drawdown:', pa.max_drawdown(port_ret))
        strategy_ret = pa.cum_ret(port_ret)
        strategy_rets.append(strategy_ret)

    # Plot the benchmark return. Benchmark is the equal weighted 
    # portfolio of all the stocks.
    bm_ret = data.groupby(level=0)['stock_exret'].mean()
    bm_ret = pa.cum_ret(bm_ret)

    new_col_names = ['long on genetic' + str(i) for i in range(1, 6)] + ['benchmark']
    strategy_rets = pd.DataFrame(strategy_rets + [bm_ret]).T
    strategy_rets.columns = new_col_names
    strategy_rets.plot()
    plt.tight_layout()
    plt.savefig('C:\\Users\\25286\\Downloads\\genetic_factors.eps', bbox_inches='tight')
    plt.show()
